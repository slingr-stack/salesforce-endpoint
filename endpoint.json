{
    "label": "Salesforce",
    "name": "salesforce",
    "apiVersion": "v1",
    "internal": false,
    "configurationType": "GLOBAL",
    "deployment": {
        "jsEndpoint": true,
        "profiles": [
            {
                "name": "small",
                "label": "Small",
                "memory": 128,
                "description": "Small Memory Allocation"
            },
            {
                "name": "default",
                "label": "Default",
                "memory": 256,
                "description": "Default Memory Allocation"
            },
            {
                "name": "medium",
                "label": "Medium",
                "memory": 512,
                "description": "Medium Memory Allocation"
            },
            {
                "name": "big",
                "label": "Big",
                "memory": 256,
                "description": "Big Memory Allocation"
            }
        ],
        "allowMultipleInstances": false
    },
    "status": "ACTIVE",
    "stores": [],
    "events": [
        {
            "label": "Inbound Event",
            "name": "inboundEvent",
            "description": "Event send for the endpoint each time that a POST request to the root path of the web service."
        },
        {
            "label": "On Download Complete",
            "name": "onDownloadComplete",
            "description": "Callback event for when upload of a file has finished"
        },
        {
            "label": "On Upload Finished",
            "name": "onUploadComplete",
            "description": "Callback event for when upload of a file has finished"
        },
        {
            "label": "Pong",
            "name": "pong",
            "description": "Callback event for ping function"
        }
    ],
    "functions": [
        {
            "label": "GET",
            "name": "_get"
        },
        {
            "label": "POST",
            "name": "_post"
        },
        {
            "label": "PATCH",
            "name": "_patch"
        },
        {
            "label": "PUT",
            "name": "_put"
        },
        {
            "label": "DELETE",
            "name": "_delete"
        }
    ],
    "scripts": [
        "salesforce-helpers.js",
        "http-generic-helpers.js"
    ],
    "configuration": [
        {
            "name": "instanceUrl",
            "label": "Instance URL",
            "description": "Salesforce Instance URL Value",
            "type": "text",
            "required": true
        },
        {
            "name": "clientId",
            "label": "Client ID",
            "description": "Customer Client ID Value",
            "type": "text",
            "required": true
        },
        {
            "name": "clientSecret",
            "label": "Client Secret",
            "description": "Customer Client Secret Value",
            "type": "password",
            "required": true
        },
        {
            "name": "authorizationMethod",
            "label": "Authorization Method",
            "defaultValue": "salesforceAuthorization",
            "type": "buttonsGroup",
            "typeOptions": {
                "allowCustom": false,
                "possibleValues": [
                    {
                        "label": "Salesforce Authorization",
                        "name": "salesforceAuthorization"
                    },
                    {
                        "label": "Username - Password",
                        "name": "usernamePassword"
                    }
                ]
            }
        },
        {
            "name": "salesforceAuthorizationRequest",
            "label": "Salesforce Authorization",
            "type": "oauth2",
            "visibility": "config.authorizationMethod == 'salesforceAuthorization'",
            "typeOptions": {
                "clientId": "config.clientId",
                "clientSecret": "config.clientSecret",
                "authUrl": "config.instanceUrl + '/services/oauth2/authorize'",
                "accessTokenUrl": "config.instanceUrl + '/oauth2/token'",
                "scope": "'read+write'",
                "grantType": "'authorization_code'",
                "accessToken": "@config.accessToken",
                "refreshToken": "@config.refreshToken"
            }
        },
        
        {
            "name": "connectButton",
            "label": "Connect to Salesforce",
            "type": "button",
            "typeOptions": {
                "color": "primary",
                "icon": "zmdi-play",
                "action": "var redirectUri = config.redirectUri; var url = config.instanceUrl + '/services/oauth2/authorize?client_id=' + config.clientId + '&redirect_uri=' + redirectUri + 'response_type=code'; var win = window.open(url, 'Authorization page', 'toolbar=no,scrollbars=no,location=no,statusbar=no,menubar=no,resizable=0,width=500,height=600,left=' + ((screen.width / 2) - 250) + ',top=' + ((screen.height / 2) - 250) + ','); var self = this; var intervalFn = function () { try { if (!win || !win.location) { window.clearInterval(pollTimer); } else { if (win.location.href.indexOf('/callback') != -1) { win.innerWidth = 100; win.innerHeight = 100; win.screenX = screen.width; win.screenY = screen.height; window.clearInterval(pollTimer); url = win.location.href; var pos = url.indexOf('code='); var token; if (pos > -1) { token = url.substring(pos + 5); config.accessToken = token; } } try { win.close(); } catch (e) { } } } catch (e) { } }; var pollTimer = window.setInterval(function () { intervalFn.apply(self) }, 500);"
            },
            "visibility": "config.authorizationMethod == 'salesforceAuthorization'"
        },
        {
            "name": "accessToken",
            "label": "Access token",
            "type": "text",
            "visibility": "config.authorizationMethod == 'salesforceAuthorization'"
        },
        {
            "name": "refreshToken",
            "label": "Refresh token",
            "type": "text",
            "visibility": "config.authorizationMethod == 'salesforceAuthorization'"
        },
        {
            "name": "userName",
            "label": "User Name",
            "description": "Customer User Name Value",
            "type": "text",
            "required": "config.authorizationMethod == 'usernamePassword'",
            "visibility": "config.authorizationMethod == 'usernamePassword'"
        },
        {
            "name": "password",
            "label": "Password",
            "description": "Customer Password Value",
            "type": "password",
            "required": "config.authorizationMethod == 'usernamePassword'",
            "visibility": "config.authorizationMethod == 'usernamePassword'"
        }
    ]
}