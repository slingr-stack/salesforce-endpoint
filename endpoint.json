{
    "label": "Salesforce",
    "name": "salesforce",
    "apiVersion": "v1",
    "internal": false,
    "configurationType": "GLOBAL",
    "deployment": {
        "jsEndpoint": true,
        "profiles": [
            {
                "name": "default",
                "label": "Default",
                "memory": 256,
                "description": "Default Memory Allocation"
            }
        ],
        "allowMultipleInstances": false
    },
    "status": "ACTIVE",
    "stores": [
        { "name": "authorizationCode" }
    ],
    "events": [
        {
            "label": "Webhook",
            "name": "webhook",
            "description": "Receive a POST request for webhook events."
        }
    ],
    "functions": [
        {
            "label": "GET",
            "name": "_get"
        },
        {
            "label": "POST",
            "name": "_post"
        },
        {
            "label": "PATCH",
            "name": "_patch"
        },
        {
            "label": "PUT",
            "name": "_put"
        },
        {
            "label": "DELETE",
            "name": "_delete"
        },
        {
            "label": "HEAD",
            "name": "_head"
        }
    ],
    "scripts": [
        "functions.js"
    ],
    "flowSteps": [
        "apiCallSalesforce"
    ],
    "configuration": [
        {
            "name": "instanceUrl",
            "label": "Instance URL",
            "description": "Salesforce Instance URL Value",
            "type": "text",
            "required": true
        },
        {
            "name": "consumerKey",
            "label": "Consumer Key",
            "description": "Consumer Key Value",
            "type": "text",
            "required": true
        },
        {
            "name": "consumerSecret",
            "label": "Consumer Secret",
            "description": "Consumer Secret Value",
            "type": "password",
            "required": true
        },
        {
            "name": "authorizationMethod",
            "label": "Authorization Method",
            "defaultValue": "webServer",
            "type": "buttonsGroup",
            "typeOptions": {
                "allowCustom": false,
                "possibleValues": [
                    {
                        "label": "Connect To Salesforce",
                        "name": "webServer"
                    },
                    {
                        "label": "Username - Password",
                        "name": "usernamePassword"
                    }
                ]
            }
        },
        {
            "name": "webServerButton",
            "label": "Connect To Salesforce",
            "type": "button",
            "typeOptions": {
                "color": "primary",
                "icon": "zmdi-play",
                "action": "var url = config.instanceUrl + '/services/oauth2/authorize?client_id=' + config.consumerKey + '&redirect_uri=' + config.redirectUri + '&response_type=code';\nvar win = window.open(url, 'Authorization page', 'toolbar=no,scrollbars=no,location=no,statusbar=no,menubar=no,resizable=0,width=500,height=600,left=' + ((screen.width / 2) - 250) + ',top=' + ((screen.height / 2) - 250) + ',');\nvar self = this;\nvar intervalFn = function () {\n    try {\n        if (!win || !win.location) {\n            window.clearInterval(pollTimer);\n        } else {\n            if (win.location.href.startsWith(config.redirectUri)) {\n                win.innerWidth = 100;\n                win.innerHeight = 100;\n                win.screenX = screen.width;\n                win.screenY = screen.height;\n                window.clearInterval(pollTimer);\n                const urlParams = new URLSearchParams(win.location.search);\n                var code;\n                if (urlParams.has('code')) {\n                    code = urlParams.get('code');\n                    config.code = code; \n     win.close(); \n          }\n            }\n           }\n    } catch (e) {\n    }\n};\nvar pollTimer = window.setInterval(function () { intervalFn.apply(self) }, 500);"
            },
            "visibility": "config.authorizationMethod == 'webServer'"
        },
        {
            "name": "redirectUri",
            "label": "Redirect URI",
            "description": "Redirect URI to register on your application",
            "type": "label",
            "value": "config.SERVER_URL + '/callback'",
            "visibility": "config.authorizationMethod == 'webServer'"
        },
        {
            "name": "code",
            "label": "Authorization Code",
            "type": "text",
            "visibility": "config.authorizationMethod == 'webServer'"
        },
        {
            "name": "userName",
            "label": "Username",
            "description": "Customer Username Value",
            "type": "text",
            "required": "config.authorizationMethod == 'usernamePassword'",
            "visibility": "config.authorizationMethod == 'usernamePassword'"
        },
        {
            "name": "password",
            "label": "Password",
            "description": "Customer Password Value",
            "type": "password",
            "required": "config.authorizationMethod == 'usernamePassword'",
            "visibility": "config.authorizationMethod == 'usernamePassword'"
        },
        {
            "name": "appConfig",
            "label": "Important",
            "value": "Append the users security token to their password. A security token is an automatically generated key from Salesforce. For example, if a user's password is mypassword, and their security token is XXXXXXXXXX, then the value provided for this parameter must be mypasswordXXXXXXXXXX.",
            "type": "info",
            "visibility": "config.authorizationMethod == 'usernamePassword'"
        }
    ]
}